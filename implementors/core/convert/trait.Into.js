(function() {var implementors = {};
implementors["backtrace"] = [{"text":"impl Into&lt;Vec&lt;BacktraceFrame, Global&gt;&gt; for Backtrace","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Into&lt;u64&gt; for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian&gt; Into&lt;&amp;'input [u8]&gt; for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["widestring"] = [{"text":"impl&lt;C:&nbsp;UChar&gt; Into&lt;Vec&lt;C, Global&gt;&gt; for UCString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; Into&lt;Vec&lt;C, Global&gt;&gt; for NulError&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; Into&lt;Vec&lt;C, Global&gt;&gt; for UString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl Into&lt;UString&lt;u16&gt;&gt; for Vec&lt;u16&gt;","synthetic":false,"types":[]},{"text":"impl Into&lt;UString&lt;u32&gt;&gt; for Vec&lt;u32&gt;","synthetic":false,"types":[]},{"text":"impl Into&lt;UString&lt;u32&gt;&gt; for Vec&lt;char&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()